#!/usr/bin/env python3

# This script is used to set the keyboard layout for keyd.

import argparse
import json
import os
import sys

sys.path.insert(0, "/usr/lib/eupnea")
from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--automatic", action="store_true", dest="automatic",
                        help="Automatically set the keyboard layout based on the device codename")
    parser.add_argument("--no-check-install", action="store_true", dest="no_check_install",
                        help="Do not check if keyd was installed correctly")
    parser.add_argument("--skip-keyd-reload", action="store_true", dest="skip_keyd_reload",
                        help="Do not reload keyd after setting the keyboard layout")
    return parser.parse_args()


if __name__ == "__main__":
    args = process_args()

    # Restart script as root
    if os.geteuid() != 0:
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    # check if keyd is installed correctly
    if not os.path.exists("/etc/keyd") and not args.no_check_install:
        print_error("Keyd was not installed correctly. Please reinstall keyd and try again")
        sys.exit(1)

    if not args.automatic:
        all_layouts = os.listdir("/usr/share/eupnea/keyboard-layouts")

        print_header("Available keyboard layouts:")
        for layout in all_layouts:
            print(layout)

        while True:
            selected_layout = input("\033[92m" + "Please type the full name of the layout you want to use" + "\033[0m")
            if selected_layout not in all_layouts:
                print_warning("Invalid layout name. Please try again.")
            else:
                break
    else:
        # read device codename from dmi
        with open("/sys/devices/virtual/dmi/id/product_name", "r") as dmi:
            device_codename = dmi.read().lower().strip()
        # Some codenames have special keyboard layouts -> match them first
        match device_codename:
            case "banshee":  # aka Framework Chromebook
                selected_layout = "cros-banshee.conf"
            case "nocturne" | "eve" | "atlas":  # Google Pixelbooks
                selected_layout = "cros-pixel.conf"
            case "lindar":  # despite being a tigerlake cb it has an old layout
                selected_layout = "cros-standard.conf"
            case "jinlon":  # aka HP Chromebook x360 13c / Elite c1030
                selected_layout = "cros-jinlon.conf"
            case "sarien":  # aka Dell Latitude 5400 Chromebook
                selected_layout = "cros-sarien.conf"
            case _:
                # Use the board-generations file of the audio setup script to determine which layout should be used
                with open("/usr/share/eupnea/board-generations.json", "r") as generations:
                    board_generations = json.load(generations)
                match board_generations[device_codename]:
                    case "tgl" | "adl":
                        selected_layout = "cros-modern.conf"
                    case _:
                        selected_layout = "cros-standard.conf"

    print_status(f"Setting keyboard layout to: {selected_layout}")
    # -f to overwrite existing symlink
    bash(f"ln -sf /usr/share/eupnea/keyboard-layouts/{selected_layout} /etc/keyd/base.conf")

    # restart keyd
    if not args.skip_keyd_reload:
        bash("systemctl restart keyd")
