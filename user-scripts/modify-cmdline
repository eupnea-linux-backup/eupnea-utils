#!/usr/bin/env python3

# This script is an interactive frontend for the system script install-kernel (/usr/lib/eupnea/install-kernel).

import argparse
import os
import signal
import sys

sys.path.insert(0, "/usr/lib/eupnea")
from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--print-current', action="store_true", dest="print_current", default=False,
                        help="Show current command line")
    parser.add_argument("--skip-backup", dest="skip_backup", default=False,
                        help="Do not backup kernel from 1st partition to 2nd.")
    parser.add_argument("--force-cli-editor", dest="force_cli_editor", action="store_true",
                        help="Force the use of a cli text editor.")
    parser.add_argument("-v", action="store_true", dest="verbose", default=False, help="Print more output")
    return parser.parse_args()


def cli_editors():
    os.system(f"{os.environ["EDITOR"]} {temp_cmdline_file}")

if __name__ == "__main__":
    args = process_args()
    if args.print_current:
        print_header("Current command line: ")
        with open("/proc/cmdline", "r") as file:
            print(file.read())
        exit(0)

    # Check if a reboot is pending
    if path_exists("/var/tmp/reboot_needed"):
        with open("/var/tmp/reboot_needed", "r") as f:
            reboot_needed = f.read()
        with open("/proc/sys/kernel/random/boot_id", "r") as f:
            boot_id = f.read()
        if reboot_needed == boot_id:
            print_error("System is pending a reboot. Please reboot before proceeding.")
            exit(65)

    # Save current cmdline to a file
    with open("/proc/cmdline", "r") as file:
        current_cmdline = file.read().strip()
    # remove cros_secure kernel flags, as they are added automatically each boot anyway
    current_cmdline = current_cmdline.replace("cros_secure ", "")
    temp_cmdline_file = bash("mktemp").strip()
    with open(temp_cmdline_file, "w") as file:
        file.write(current_cmdline)

    # Prompt user to edit cmdline with a cli text editor
    # Default to nano, fallback to vim or vi
    # "bash" from functions.py doesn't work interactively -> use os.system
    if not args.force_cli_editor:
        if path_exists("/usr/bin/gedit"):
            os.system(f"gedit {temp_cmdline_file}")
        elif path_exists("/usr/bin/gnome-text-editor"):
            os.system(f"gnome-text-editor {temp_cmdline_file}")
        elif path_exists("/usr/bin/kate"):
            os.system(f"kate {temp_cmdline_file}")
        else:
            cli_editors()
    else:
        cli_editors()

    print_header("\nNew cmdline:")
    with open(temp_cmdline_file, "r") as file:
        print_status(file.read().strip())
    # Ask user to confirm new cmdline
    try:
        input("\033[92m" + "Press ENTER to continue or CTRL+C to cancel" + "\033[0m")
    except KeyboardInterrupt:  # avoid python traceback
        print_error("\nNot modifying cmdline. Exiting...")
        exit(0)

    # do not allow ctrl+c to avoid corrupting the kernel
    signal.signal(signal.SIGINT, signal.SIG_IGN)  # ignore ctrl+c

    if not args.skip_backup:
        # read partitions
        partitions = bash("mount | grep ' / ' | cut -d' ' -f 1")
        partitions = partitions[:-1]  # get device name
        print_status("Backing up kernel")
        print_question("Backing up kernel requires root privileges.")
        bash(f"sudo dd if={partitions}1 of={partitions}2")  # backup kernel partition to second partition

    # start install-kernel script
    print_status("Installing new kernel")
    print_question("Installing kernel requires root privileges.")
    bash(f"sudo /usr/lib/eupnea/install-kernel --kernel-flags {temp_cmdline_file}")

    print_header("Kernel cmdline modified successfully! Please reboot to use the new cmdline")
    # restore ctrl+c functionality
    signal.signal(signal.SIGINT, lambda *arg: exec('raise KeyboardInterrupt'))
    try:
        input("\033[92m" + "Press ENTER to reboot or CTRL+C to cancel reboot" + "\033[0m")
    except KeyboardInterrupt:
        print_error("\nNot rebooting. Please reboot manually...")
        exit(0)
    bash("reboot")
